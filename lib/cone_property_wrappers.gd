# WARNING: This file was generated by etc/generate_cone_property_wrappers.g,
# DO NOT EDIT IT BY HAND!

#! @Chapter Functions
#! @Section Cone properties

#! @Arguments cone
#! @Returns the affine dimension
#! @Description
#! 
#! The affine dimension of the polyhedron in inhomogeneous computations. Its computation is triggered if necessary.
#! <P/>
#! This is an alias for <C>NmzConeProperty( cone, "AffineDim" );</C> see <Ref Func="NmzConeProperty"/>.
DeclareGlobalFunction( "NmzAffineDim" );
#! @Arguments cone
#! @Description
#! This is an alias for <C>NmzConeProperty( cone, "AllGeneratorsTriangulation" );</C> see <Ref Func="NmzConeProperty"/>.
DeclareGlobalFunction( "NmzAllGeneratorsTriangulation" );
#! @Arguments cone
#! @Description
#! This is an alias for <C>NmzConeProperty( cone, "AmbientAutomorphisms" );</C> see <Ref Func="NmzConeProperty"/>.
DeclareGlobalFunction( "NmzAmbientAutomorphisms" );
#! @Arguments cone
#! @Description
#! This is an alias for <C>NmzConeProperty( cone, "Approximate" );</C> see <Ref Func="NmzConeProperty"/>.
DeclareGlobalFunction( "NmzApproximate" );
#! @Arguments cone
#! @Description
#! This is an alias for <C>NmzConeProperty( cone, "Automorphisms" );</C> see <Ref Func="NmzConeProperty"/>.
DeclareGlobalFunction( "NmzAutomorphisms" );
#! @Arguments cone
#! @Description
#! This is an alias for <C>NmzConeProperty( cone, "AxesScaling" );</C> see <Ref Func="NmzConeProperty"/>.
DeclareGlobalFunction( "NmzAxesScaling" );
#! @Arguments cone
#! @Description
#! This is an alias for <C>NmzConeProperty( cone, "BasicStanleyDec" );</C> see <Ref Func="NmzConeProperty"/>.
DeclareGlobalFunction( "NmzBasicStanleyDec" );
#! @Arguments cone
#! @Description
#! This is an alias for <C>NmzConeProperty( cone, "BasicTriangulation" );</C> see <Ref Func="NmzConeProperty"/>.
DeclareGlobalFunction( "NmzBasicTriangulation" );
#! @Arguments cone
#! @Description
#! This is an alias for <C>NmzConeProperty( cone, "BigInt" );</C> see <Ref Func="NmzConeProperty"/>.
DeclareGlobalFunction( "NmzBigInt" );
#! @Arguments cone
#! @Description
#! This is an alias for <C>NmzConeProperty( cone, "BottomDecomposition" );</C> see <Ref Func="NmzConeProperty"/>.
DeclareGlobalFunction( "NmzBottomDecomposition" );
#! @Arguments cone
#! @Returns the class group in a special format
#! @Description
#! 
#! A normal affine monoid $M$ has a well-defined divisor class group.
#! It is naturally isomorphic to the divisor class group of $K[M]$ where $K$
#! is a field (or any unique factorization domain).
#! We represent it as a vector where the first entry is the rank. It is
#! followed by sequence of pairs of entries <M>n,m</M>. Such two entries
#! represent a free cyclic summand <M>(\mathbb{Z}/n\mathbb{Z})^m</M>.
#! Not allowed in inhomogeneous computations.
#! <P/>
#! This is an alias for <C>NmzConeProperty( cone, "ClassGroup" );</C> see <Ref Func="NmzConeProperty"/>.
DeclareGlobalFunction( "NmzClassGroup" );
#! @Arguments cone
#! @Description
#! This is an alias for <C>NmzConeProperty( cone, "CombinatorialAutomorphisms" );</C> see <Ref Func="NmzConeProperty"/>.
DeclareGlobalFunction( "NmzCombinatorialAutomorphisms" );
#! @Arguments cone
#! @Description
#! This is an alias for <C>NmzConeProperty( cone, "ConeDecomposition" );</C> see <Ref Func="NmzConeProperty"/>.
DeclareGlobalFunction( "NmzConeDecomposition" );
#! @Arguments cone
#! @Returns a matrix whose rows represent the congruences
#! @Description
#! 
#! The equations, congruences and support hyperplanes together
#! describe the lattice points of the cone.
#! <P/>
#! This is an alias for <C>NmzConeProperty( cone, "Congruences" );</C> see <Ref Func="NmzConeProperty"/>.
DeclareGlobalFunction( "NmzCongruences" );
#! @Arguments cone
#! @Description
#! This is an alias for <C>NmzConeProperty( cone, "CoveringFace" );</C> see <Ref Func="NmzConeProperty"/>.
DeclareGlobalFunction( "NmzCoveringFace" );
#! @Arguments cone
#! @Description
#! This is an alias for <C>NmzConeProperty( cone, "DefaultMode" );</C> see <Ref Func="NmzConeProperty"/>.
DeclareGlobalFunction( "NmzDefaultMode" );
#! @Arguments cone
#! @Returns a matrix whose rows are the degree 1 elements
#! @Description
#! 
#! Requires the presence of a grading. Not allowed in inhomogeneous computations.
#! <P/>
#! This is an alias for <C>NmzConeProperty( cone, "Deg1Elements" );</C> see <Ref Func="NmzConeProperty"/>.
DeclareGlobalFunction( "NmzDeg1Elements" );
#! @Arguments cone
#! @Returns the dehomgenization vector
#! @Description
#! 
#! Only for inhomogeneous computations.
#! <P/>
#! This is an alias for <C>NmzConeProperty( cone, "Dehomogenization" );</C> see <Ref Func="NmzConeProperty"/>.
DeclareGlobalFunction( "NmzDehomogenization" );
#! @Arguments cone
#! @Description
#! This is an alias for <C>NmzConeProperty( cone, "Descent" );</C> see <Ref Func="NmzConeProperty"/>.
DeclareGlobalFunction( "NmzDescent" );
#! @Arguments cone
#! @Description
#! This is an alias for <C>NmzConeProperty( cone, "DistributedComp" );</C> see <Ref Func="NmzConeProperty"/>.
DeclareGlobalFunction( "NmzDistributedComp" );
#! @Arguments cone
#! @Description
#! This is an alias for <C>NmzConeProperty( cone, "DualFVector" );</C> see <Ref Func="NmzConeProperty"/>.
DeclareGlobalFunction( "NmzDualFVector" );
#! @Arguments cone
#! @Description
#! This is an alias for <C>NmzConeProperty( cone, "DualFaceLattice" );</C> see <Ref Func="NmzConeProperty"/>.
DeclareGlobalFunction( "NmzDualFaceLattice" );
#! @Arguments cone
#! @Description
#! This is an alias for <C>NmzConeProperty( cone, "DualIncidence" );</C> see <Ref Func="NmzConeProperty"/>.
DeclareGlobalFunction( "NmzDualIncidence" );
#! @Arguments cone
#! @Description
#! This is an alias for <C>NmzConeProperty( cone, "DualMode" );</C> see <Ref Func="NmzConeProperty"/>.
DeclareGlobalFunction( "NmzDualMode" );
#! @Arguments cone
#! @Description
#! This is an alias for <C>NmzConeProperty( cone, "Dynamic" );</C> see <Ref Func="NmzConeProperty"/>.
DeclareGlobalFunction( "NmzDynamic" );
#! @Arguments cone
#! @Description
#! This is an alias for <C>NmzConeProperty( cone, "EhrhartQuasiPolynomial" );</C> see <Ref Func="NmzConeProperty"/>.
DeclareGlobalFunction( "NmzEhrhartQuasiPolynomial" );
#! @Arguments cone
#! @Description
#! 
#!  Supported in Normaliz >= 3.5.0.
#! <P/>
#! This is an alias for <C>NmzConeProperty( cone, "EhrhartSeries" );</C> see <Ref Func="NmzConeProperty"/>.
DeclareGlobalFunction( "NmzEhrhartSeries" );
#! @Arguments cone
#! @Returns the embedding dimension of the cone
#! @Description
#! 
#! The embedding dimension is the dimension of the space in which the
#! computation is done. It is the number of components of the output vectors.
#! This value is always known directly after the creation of the cone.
#! <P/>
#! This is an alias for <C>NmzConeProperty( cone, "EmbeddingDim" );</C> see <Ref Func="NmzConeProperty"/>.
DeclareGlobalFunction( "NmzEmbeddingDimension" );
#! @Arguments cone
#! @Returns a matrix whose rows represent the equations
#! @Description
#! 
#! The equations cut out the linear space generated by the cone.
#! The equations, congruences and support hyperplanes together
#! describe the lattice points of the cone.
#! <P/>
#! This is an alias for <C>NmzConeProperty( cone, "Equations" );</C> see <Ref Func="NmzConeProperty"/>.
DeclareGlobalFunction( "NmzEquations" );
#! @Arguments cone
#! @Description
#! This is an alias for <C>NmzConeProperty( cone, "EuclideanAutomorphisms" );</C> see <Ref Func="NmzConeProperty"/>.
DeclareGlobalFunction( "NmzEuclideanAutomorphisms" );
#! @Arguments cone
#! @Description
#! This is an alias for <C>NmzConeProperty( cone, "EuclideanIntegral" );</C> see <Ref Func="NmzConeProperty"/>.
DeclareGlobalFunction( "NmzEuclideanIntegral" );
#! @Arguments cone
#! @Description
#! 
#!  Supported in Normaliz >= 3.5.0.
#! <P/>
#! This is an alias for <C>NmzConeProperty( cone, "EuclideanVolume" );</C> see <Ref Func="NmzConeProperty"/>.
DeclareGlobalFunction( "NmzEuclideanVolume" );
#! @Arguments cone
#! @Returns a matrix whose rows represent the excluded faces
#! @Description
#! This is an alias for <C>NmzConeProperty( cone, "ExcludedFaces" );</C> see <Ref Func="NmzConeProperty"/>.
DeclareGlobalFunction( "NmzExcludedFaces" );
#! @Arguments cone
#! @Description
#! This is an alias for <C>NmzConeProperty( cone, "ExploitAutomsVectors" );</C> see <Ref Func="NmzConeProperty"/>.
DeclareGlobalFunction( "NmzExploitAutomsVectors" );
#! @Arguments cone
#! @Description
#! This is an alias for <C>NmzConeProperty( cone, "ExploitIsosMult" );</C> see <Ref Func="NmzConeProperty"/>.
DeclareGlobalFunction( "NmzExploitIsosMult" );
#! @Arguments cone
#! @Description
#! This is an alias for <C>NmzConeProperty( cone, "ExternalIndex" );</C> see <Ref Func="NmzConeProperty"/>.
DeclareGlobalFunction( "NmzExternalIndex" );
#! @Arguments cone
#! @Returns a matrix whose rows are the extreme rays
#! @Description
#! This is an alias for <C>NmzConeProperty( cone, "ExtremeRays" );</C> see <Ref Func="NmzConeProperty"/>.
DeclareGlobalFunction( "NmzExtremeRays" );
#! @Arguments cone
#! @Description
#! This is an alias for <C>NmzConeProperty( cone, "ExtremeRaysFloat" );</C> see <Ref Func="NmzConeProperty"/>.
DeclareGlobalFunction( "NmzExtremeRaysFloat" );
#! @Arguments cone
#! @Description
#! 
#!  Supported in Normaliz >= 3.7.0.
#! <P/>
#! This is an alias for <C>NmzConeProperty( cone, "FVector" );</C> see <Ref Func="NmzConeProperty"/>.
DeclareGlobalFunction( "NmzFVector" );
#! @Arguments cone
#! @Description
#! 
#!  Supported in Normaliz >= 3.7.0.
#! <P/>
#! This is an alias for <C>NmzConeProperty( cone, "FaceLattice" );</C> see <Ref Func="NmzConeProperty"/>.
DeclareGlobalFunction( "NmzFaceLattice" );
#! @Arguments cone
#! @Description
#! This is an alias for <C>NmzConeProperty( cone, "FixedPrecision" );</C> see <Ref Func="NmzConeProperty"/>.
DeclareGlobalFunction( "NmzFixedPrecision" );
#! @Arguments cone
#! @Description
#! This is an alias for <C>NmzConeProperty( cone, "FullConeDynamic" );</C> see <Ref Func="NmzConeProperty"/>.
DeclareGlobalFunction( "NmzFullConeDynamic" );
#! @Arguments cone
#! @Returns a vector representing the generator of the interior of <A>cone</A>
#! @Description
#! 
#! If <A>cone</A> is Gorenstein, this function returns the generator of the interior of <A>cone</A>.
#! If <A>cone</A> is not Gorenstein, an error is raised.
#! <P/>
#! This is an alias for <C>NmzConeProperty( cone, "GeneratorOfInterior" );</C> see <Ref Func="NmzConeProperty"/>.
DeclareGlobalFunction( "NmzGeneratorOfInterior" );
#! @Arguments cone
#! @Returns a matrix whose rows are the generators of <A>cone</A>
#! @Description
#! This is an alias for <C>NmzConeProperty( cone, "Generators" );</C> see <Ref Func="NmzConeProperty"/>.
DeclareGlobalFunction( "NmzGenerators" );
#! @Arguments cone
#! @Returns the grading vector
#! @Description
#! This is an alias for <C>NmzConeProperty( cone, "Grading" );</C> see <Ref Func="NmzConeProperty"/>.
DeclareGlobalFunction( "NmzGrading" );
#! @Arguments cone
#! @Description
#! This is an alias for <C>NmzConeProperty( cone, "GradingDenom" );</C> see <Ref Func="NmzConeProperty"/>.
DeclareGlobalFunction( "NmzGradingDenom" );
#! @Arguments cone
#! @Description
#! This is an alias for <C>NmzConeProperty( cone, "GradingIsPositive" );</C> see <Ref Func="NmzConeProperty"/>.
DeclareGlobalFunction( "NmzGradingIsPositive" );
#! @Arguments cone
#! @Description
#! This is an alias for <C>NmzConeProperty( cone, "HSOP" );</C> see <Ref Func="NmzConeProperty"/>.
DeclareGlobalFunction( "NmzHSOP" );
#! @Arguments cone
#! @Returns a matrix whose rows are the Hilbert basis elements
#! @Description
#! This is an alias for <C>NmzConeProperty( cone, "HilbertBasis" );</C> see <Ref Func="NmzConeProperty"/>.
DeclareGlobalFunction( "NmzHilbertBasis" );
#! @Arguments cone
#! @Returns the Hilbert function as a quasipolynomial
#! @Description
#! 
#! The Hilbert function counts the lattice points degreewise. The result is a
#! quasipolynomial <M>Q</M>, that is, a polynomial with periodic coefficients. It is
#! given as list of polynomials <M>P_0, \ldots, P_{(p-1)}</M> such that <M>Q(i) = P_{(i \bmod p)} (i)</M>.
#! <P/>
#! This is an alias for <C>NmzConeProperty( cone, "HilbertQuasiPolynomial" );</C> see <Ref Func="NmzConeProperty"/>.
DeclareGlobalFunction( "NmzHilbertQuasiPolynomial" );
#! @Arguments cone
#! @Returns the Hilbert series as rational function
#! @Description
#! 
#! The result consists of a list with two entries. The first is the numerator
#! polynomial. In inhomogeneous computations this can also be a Laurent
#! polynomial. The second list entry represents the denominator. It is a list
#! of pairs <M>[k_i, l_i]</M>. Such a pair represents the factor <M>(1-t^{k_i})^{l_i}</M>.
#! <P/>
#! This is an alias for <C>NmzConeProperty( cone, "HilbertSeries" );</C> see <Ref Func="NmzConeProperty"/>.
DeclareGlobalFunction( "NmzHilbertSeries" );
#! @Arguments cone
#! @Description
#! 
#!  Supported in Normaliz >= 3.8.0.
#! <P/>
#! This is an alias for <C>NmzConeProperty( cone, "Incidence" );</C> see <Ref Func="NmzConeProperty"/>.
DeclareGlobalFunction( "NmzIncidence" );
#! @Arguments cone
#! @Returns inclusion-exclusion data
#! @Description
#! 
#! List of faces which are internally have been used in the inclusion-exclusion
#! scheme. Given as a list pairs. The first pair entry is a key of generators
#! contained in the face (compare also <Ref Func="NmzTriangulation"/>) and the
#! multiplicity with which it was considered.
#! Only available with excluded faces or strict constraints as input.
#! <P/>
#! This is an alias for <C>NmzConeProperty( cone, "InclusionExclusionData" );</C> see <Ref Func="NmzConeProperty"/>.
DeclareGlobalFunction( "NmzInclusionExclusionData" );
#! @Arguments cone
#! @Description
#! This is an alias for <C>NmzConeProperty( cone, "InputAutomorphisms" );</C> see <Ref Func="NmzConeProperty"/>.
DeclareGlobalFunction( "NmzInputAutomorphisms" );
#! @Arguments cone
#! @Description
#! This is an alias for <C>NmzConeProperty( cone, "IntegerHull" );</C> see <Ref Func="NmzConeProperty"/>.
DeclareGlobalFunction( "NmzIntegerHull" );
#! @Arguments cone
#! @Description
#! This is an alias for <C>NmzConeProperty( cone, "Integral" );</C> see <Ref Func="NmzConeProperty"/>.
DeclareGlobalFunction( "NmzIntegral" );
#! @Arguments cone
#! @Description
#! This is an alias for <C>NmzConeProperty( cone, "InternalIndex" );</C> see <Ref Func="NmzConeProperty"/>.
DeclareGlobalFunction( "NmzInternalIndex" );
#! @Arguments cone
#! @Returns <K>true</K> if all extreme rays have degree 1; <K>false</K> otherwise
#! @Description
#! This is an alias for <C>NmzConeProperty( cone, "IsDeg1ExtremeRays" );</C> see <Ref Func="NmzConeProperty"/>.
DeclareGlobalFunction( "NmzIsDeg1ExtremeRays" );
#! @Arguments cone
#! @Returns <K>true</K> if all Hilbert basis elements have degree 1; <K>false</K> otherwise
#! @Description
#! This is an alias for <C>NmzConeProperty( cone, "IsDeg1HilbertBasis" );</C> see <Ref Func="NmzConeProperty"/>.
DeclareGlobalFunction( "NmzIsDeg1HilbertBasis" );
#! @Arguments cone
#! @Description
#! This is an alias for <C>NmzConeProperty( cone, "IsEmptySemiOpen" );</C> see <Ref Func="NmzConeProperty"/>.
DeclareGlobalFunction( "NmzIsEmptySemiOpen" );
#! @Arguments cone
#! @Returns whether the cone is Gorenstein
#! @Description
#! 
#! Returns true if <A>cone</A> is Gorenstein, false otherwise.
#! <P/>
#! This is an alias for <C>NmzConeProperty( cone, "IsGorenstein" );</C> see <Ref Func="NmzConeProperty"/>.
DeclareGlobalFunction( "NmzIsGorenstein" );
#! @Arguments cone
#! @Returns whether the cone is inhomogeneous
#! @Description
#! 
#! This value is always known directly after the creation of the cone.
#! <P/>
#! This is an alias for <C>NmzConeProperty( cone, "IsInhomogeneous" );</C> see <Ref Func="NmzConeProperty"/>.
DeclareGlobalFunction( "NmzIsInhomogeneous" );
#! @Arguments cone
#! @Returns <K>true</K> if the cone is integrally closed; <K>false</K> otherwise
#! @Description
#! 
#! It is integrally closed when the Hilbert basis is a subset of the original monoid generators. So it is only computable if we have original monoid generators.
#! <P/>
#! This is an alias for <C>NmzConeProperty( cone, "IsIntegrallyClosed" );</C> see <Ref Func="NmzConeProperty"/>.
DeclareGlobalFunction( "NmzIsIntegrallyClosed" );
#! @Arguments cone
#! @Returns <K>true</K> if the cone is pointed; <K>false</K> otherwise
#! @Description
#! This is an alias for <C>NmzConeProperty( cone, "IsPointed" );</C> see <Ref Func="NmzConeProperty"/>.
DeclareGlobalFunction( "NmzIsPointed" );
#! @Arguments cone
#! @Returns <K>true</K> if is the monomial ideal is primary to the irrelevant maximal ideal, <K>false</K> otherwise
#! @Description
#! 
#! Only used with the input type <C>rees_algebra</C>.
#! <P/>
#! This is an alias for <C>NmzConeProperty( cone, "IsReesPrimary" );</C> see <Ref Func="NmzConeProperty"/>.
DeclareGlobalFunction( "NmzIsReesPrimary" );
#! @Arguments cone
#! @Description
#! This is an alias for <C>NmzConeProperty( cone, "IsTriangulationNested" );</C> see <Ref Func="NmzConeProperty"/>.
DeclareGlobalFunction( "NmzIsTriangulationNested" );
#! @Arguments cone
#! @Description
#! This is an alias for <C>NmzConeProperty( cone, "IsTriangulationPartial" );</C> see <Ref Func="NmzConeProperty"/>.
DeclareGlobalFunction( "NmzIsTriangulationPartial" );
#! @Arguments cone
#! @Description
#! This is an alias for <C>NmzConeProperty( cone, "KeepOrder" );</C> see <Ref Func="NmzConeProperty"/>.
DeclareGlobalFunction( "NmzKeepOrder" );
#! @Arguments cone
#! @Description
#! This is an alias for <C>NmzConeProperty( cone, "LatticePointTriangulation" );</C> see <Ref Func="NmzConeProperty"/>.
DeclareGlobalFunction( "NmzLatticePointTriangulation" );
#! @Arguments cone
#! @Description
#! This is an alias for <C>NmzConeProperty( cone, "LatticePoints" );</C> see <Ref Func="NmzConeProperty"/>.
DeclareGlobalFunction( "NmzLatticePoints" );
#! @Arguments cone
#! @Returns a matrix whose rows generate the maximale linear subspace
#! @Description
#! This is an alias for <C>NmzConeProperty( cone, "MaximalSubspace" );</C> see <Ref Func="NmzConeProperty"/>.
DeclareGlobalFunction( "NmzMaximalSubspace" );
#! @Arguments cone
#! @Returns a matrix whose rows are the module generators
#! @Description
#! This is an alias for <C>NmzConeProperty( cone, "ModuleGenerators" );</C> see <Ref Func="NmzConeProperty"/>.
DeclareGlobalFunction( "NmzModuleGenerators" );
#! @Arguments cone
#! @Returns a matrix whose rows are the module generators over the original monoid
#! @Description
#! 
#! A minimal system of generators of  the integral closure over the original monoid.
#! Requires the existence of original monoid generators. Not allowed in inhomogeneous computations.
#! <P/>
#! This is an alias for <C>NmzConeProperty( cone, "ModuleGeneratorsOverOriginalMonoid" );</C> see <Ref Func="NmzConeProperty"/>.
DeclareGlobalFunction( "NmzModuleGeneratorsOverOriginalMonoid" );
#! @Arguments cone
#! @Returns the rank of the module of lattice points in the polyhedron as a module over the recession monoid
#! @Description
#! 
#! Only for inhomogeneous computations.
#! <P/>
#! This is an alias for <C>NmzConeProperty( cone, "ModuleRank" );</C> see <Ref Func="NmzConeProperty"/>.
DeclareGlobalFunction( "NmzModuleRank" );
#! @Arguments cone
#! @Description
#! This is an alias for <C>NmzConeProperty( cone, "Multiplicity" );</C> see <Ref Func="NmzConeProperty"/>.
DeclareGlobalFunction( "NmzMultiplicity" );
#! @Arguments cone
#! @Description
#! This is an alias for <C>NmzConeProperty( cone, "NoBottomDec" );</C> see <Ref Func="NmzConeProperty"/>.
DeclareGlobalFunction( "NmzNoBottomDec" );
#! @Arguments cone
#! @Description
#! This is an alias for <C>NmzConeProperty( cone, "NoDescent" );</C> see <Ref Func="NmzConeProperty"/>.
DeclareGlobalFunction( "NmzNoDescent" );
#! @Arguments cone
#! @Description
#! This is an alias for <C>NmzConeProperty( cone, "NoGradingDenom" );</C> see <Ref Func="NmzConeProperty"/>.
DeclareGlobalFunction( "NmzNoGradingDenom" );
#! @Arguments cone
#! @Description
#! This is an alias for <C>NmzConeProperty( cone, "NoLLL" );</C> see <Ref Func="NmzConeProperty"/>.
DeclareGlobalFunction( "NmzNoLLL" );
#! @Arguments cone
#! @Description
#! This is an alias for <C>NmzConeProperty( cone, "NoNestedTri" );</C> see <Ref Func="NmzConeProperty"/>.
DeclareGlobalFunction( "NmzNoNestedTri" );
#! @Arguments cone
#! @Description
#! This is an alias for <C>NmzConeProperty( cone, "NoPeriodBound" );</C> see <Ref Func="NmzConeProperty"/>.
DeclareGlobalFunction( "NmzNoPeriodBound" );
#! @Arguments cone
#! @Description
#! This is an alias for <C>NmzConeProperty( cone, "NoProjection" );</C> see <Ref Func="NmzConeProperty"/>.
DeclareGlobalFunction( "NmzNoProjection" );
#! @Arguments cone
#! @Description
#! This is an alias for <C>NmzConeProperty( cone, "NoRelax" );</C> see <Ref Func="NmzConeProperty"/>.
DeclareGlobalFunction( "NmzNoRelax" );
#! @Arguments cone
#! @Description
#! This is an alias for <C>NmzConeProperty( cone, "NoSignedDec" );</C> see <Ref Func="NmzConeProperty"/>.
DeclareGlobalFunction( "NmzNoSignedDec" );
#! @Arguments cone
#! @Description
#! This is an alias for <C>NmzConeProperty( cone, "NoSubdivision" );</C> see <Ref Func="NmzConeProperty"/>.
DeclareGlobalFunction( "NmzNoSubdivision" );
#! @Arguments cone
#! @Description
#! This is an alias for <C>NmzConeProperty( cone, "NoSymmetrization" );</C> see <Ref Func="NmzConeProperty"/>.
DeclareGlobalFunction( "NmzNoSymmetrization" );
#! @Arguments cone
#! @Description
#! This is an alias for <C>NmzConeProperty( cone, "NumberLatticePoints" );</C> see <Ref Func="NmzConeProperty"/>.
DeclareGlobalFunction( "NmzNumberLatticePoints" );
#! @Arguments cone
#! @Returns a matrix whose rows are the original monoid generators
#! @Description
#! This is an alias for <C>NmzConeProperty( cone, "OriginalMonoidGenerators" );</C> see <Ref Func="NmzConeProperty"/>.
DeclareGlobalFunction( "NmzOriginalMonoidGenerators" );
#! @Arguments cone
#! @Description
#! This is an alias for <C>NmzConeProperty( cone, "PlacingTriangulation" );</C> see <Ref Func="NmzConeProperty"/>.
DeclareGlobalFunction( "NmzPlacingTriangulation" );
#! @Arguments cone
#! @Description
#! This is an alias for <C>NmzConeProperty( cone, "PrimalMode" );</C> see <Ref Func="NmzConeProperty"/>.
DeclareGlobalFunction( "NmzPrimalMode" );
#! @Arguments cone
#! @Description
#! 
#!  Supported in Normaliz >= 3.5.0.
#! <P/>
#! This is an alias for <C>NmzConeProperty( cone, "ProjectCone" );</C> see <Ref Func="NmzConeProperty"/>.
DeclareGlobalFunction( "NmzProjectCone" );
#! @Arguments cone
#! @Description
#! This is an alias for <C>NmzConeProperty( cone, "Projection" );</C> see <Ref Func="NmzConeProperty"/>.
DeclareGlobalFunction( "NmzProjection" );
#! @Arguments cone
#! @Description
#! This is an alias for <C>NmzConeProperty( cone, "ProjectionFloat" );</C> see <Ref Func="NmzConeProperty"/>.
DeclareGlobalFunction( "NmzProjectionFloat" );
#! @Arguments cone
#! @Description
#! This is an alias for <C>NmzConeProperty( cone, "PullingTriangulation" );</C> see <Ref Func="NmzConeProperty"/>.
DeclareGlobalFunction( "NmzPullingTriangulation" );
#! @Arguments cone
#! @Description
#! This is an alias for <C>NmzConeProperty( cone, "PullingTriangulationInternal" );</C> see <Ref Func="NmzConeProperty"/>.
DeclareGlobalFunction( "NmzPullingTriangulationInternal" );
#! @Arguments cone
#! @Returns the rank of the cone
#! @Description
#! 
#! This value is the rank of the lattice generated by the lattice points of the cone.
#! <P/>
#! This is an alias for <C>NmzConeProperty( cone, "Rank" );</C> see <Ref Func="NmzConeProperty"/>.
DeclareGlobalFunction( "NmzRank" );
#! @Arguments cone
#! @Description
#! This is an alias for <C>NmzConeProperty( cone, "RationalAutomorphisms" );</C> see <Ref Func="NmzConeProperty"/>.
DeclareGlobalFunction( "NmzRationalAutomorphisms" );
#! @Arguments cone
#! @Returns the rank of the recession cone
#! @Description
#! 
#! Only for inhomogeneous computations.
#! <P/>
#! This is an alias for <C>NmzConeProperty( cone, "RecessionRank" );</C> see <Ref Func="NmzConeProperty"/>.
DeclareGlobalFunction( "NmzRecessionRank" );
#! @Arguments cone
#! @Description
#! 
#! the multiplicity of a monomial ideal, provided it is primary to the maximal
#! ideal generated by the indeterminates. Used only with the input type
#! <C>rees_algebra</C>.
#! <P/>
#! This is an alias for <C>NmzConeProperty( cone, "ReesPrimaryMultiplicity" );</C> see <Ref Func="NmzConeProperty"/>.
DeclareGlobalFunction( "NmzReesPrimaryMultiplicity" );
#! @Arguments cone
#! @Description
#! This is an alias for <C>NmzConeProperty( cone, "RenfVolume" );</C> see <Ref Func="NmzConeProperty"/>.
DeclareGlobalFunction( "NmzRenfVolume" );
#! @Arguments cone
#! @Description
#! This is an alias for <C>NmzConeProperty( cone, "SignedDec" );</C> see <Ref Func="NmzConeProperty"/>.
DeclareGlobalFunction( "NmzSignedDec" );
#! @Arguments cone
#! @Description
#! This is an alias for <C>NmzConeProperty( cone, "StanleyDec" );</C> see <Ref Func="NmzConeProperty"/>.
DeclareGlobalFunction( "NmzStanleyDec" );
#! @Arguments cone
#! @Description
#! This is an alias for <C>NmzConeProperty( cone, "Static" );</C> see <Ref Func="NmzConeProperty"/>.
DeclareGlobalFunction( "NmzStatic" );
#! @Arguments cone
#! @Description
#! This is an alias for <C>NmzConeProperty( cone, "StrictIsoTypeCheck" );</C> see <Ref Func="NmzConeProperty"/>.
DeclareGlobalFunction( "NmzStrictIsoTypeCheck" );
#! @Arguments cone
#! @Description
#! This is an alias for <C>NmzConeProperty( cone, "Sublattice" );</C> see <Ref Func="NmzConeProperty"/>.
DeclareGlobalFunction( "NmzSublattice" );
#! @Arguments cone
#! @Description
#! 
#!  Supported in Normaliz >= 3.5.2.
#! <P/>
#! This is an alias for <C>NmzConeProperty( cone, "SuppHypsFloat" );</C> see <Ref Func="NmzConeProperty"/>.
DeclareGlobalFunction( "NmzSuppHypsFloat" );
#! @Arguments cone
#! @Returns a matrix whose rows represent the support hyperplanes
#! @Description
#! 
#! The equations cut out the linear space generated by the cone.
#! The equations, congruences and support hyperplanes together
#! describe the lattice points of the cone.
#! <P/>
#! This is an alias for <C>NmzConeProperty( cone, "SupportHyperplanes" );</C> see <Ref Func="NmzConeProperty"/>.
DeclareGlobalFunction( "NmzSupportHyperplanes" );
#! @Arguments cone
#! @Description
#! This is an alias for <C>NmzConeProperty( cone, "Symmetrize" );</C> see <Ref Func="NmzConeProperty"/>.
DeclareGlobalFunction( "NmzSymmetrize" );
#! @Arguments cone
#! @Description
#! This is an alias for <C>NmzConeProperty( cone, "TestArithOverflowDescent" );</C> see <Ref Func="NmzConeProperty"/>.
DeclareGlobalFunction( "NmzTestArithOverflowDescent" );
#! @Arguments cone
#! @Description
#! This is an alias for <C>NmzConeProperty( cone, "TestArithOverflowDualMode" );</C> see <Ref Func="NmzConeProperty"/>.
DeclareGlobalFunction( "NmzTestArithOverflowDualMode" );
#! @Arguments cone
#! @Description
#! This is an alias for <C>NmzConeProperty( cone, "TestArithOverflowFullCone" );</C> see <Ref Func="NmzConeProperty"/>.
DeclareGlobalFunction( "NmzTestArithOverflowFullCone" );
#! @Arguments cone
#! @Description
#! This is an alias for <C>NmzConeProperty( cone, "TestArithOverflowProjAndLift" );</C> see <Ref Func="NmzConeProperty"/>.
DeclareGlobalFunction( "NmzTestArithOverflowProjAndLift" );
#! @Arguments cone
#! @Description
#! This is an alias for <C>NmzConeProperty( cone, "TestLargePyramids" );</C> see <Ref Func="NmzConeProperty"/>.
DeclareGlobalFunction( "NmzTestLargePyramids" );
#! @Arguments cone
#! @Description
#! This is an alias for <C>NmzConeProperty( cone, "TestLibNormaliz" );</C> see <Ref Func="NmzConeProperty"/>.
DeclareGlobalFunction( "NmzTestLibNormaliz" );
#! @Arguments cone
#! @Description
#! This is an alias for <C>NmzConeProperty( cone, "TestLinearAlgebraGMP" );</C> see <Ref Func="NmzConeProperty"/>.
DeclareGlobalFunction( "NmzTestLinearAlgebraGMP" );
#! @Arguments cone
#! @Description
#! This is an alias for <C>NmzConeProperty( cone, "TestSimplexParallel" );</C> see <Ref Func="NmzConeProperty"/>.
DeclareGlobalFunction( "NmzTestSimplexParallel" );
#! @Arguments cone
#! @Description
#! This is an alias for <C>NmzConeProperty( cone, "TestSmallPyramids" );</C> see <Ref Func="NmzConeProperty"/>.
DeclareGlobalFunction( "NmzTestSmallPyramids" );
#! @Arguments cone
#! @Returns the triangulation
#! @Description
#! 
#! This returns a list of the maximal simplicial cones in a triangulation, i.e., a list of cones dividing the
#! cone into simplicial cones. Each cone in the list is represented by a pair.
#! The first entry of such a pair is the key of the simplex, i.e., a list of integers $a_1,\dots,a_n$
#! referring to the <Ref Func="NmzGenerators"/> (counting from 0) which are used in this simplicial cone.
#! The second entry of each pair in the list is the absolute value of the determinant of the generator matrix of the simplicial cone.
#! <P/>
#! This is an alias for <C>NmzConeProperty( cone, "Triangulation" );</C> see <Ref Func="NmzConeProperty"/>.
DeclareGlobalFunction( "NmzTriangulation" );
#! @Arguments cone
#! @Returns sum of the absolute values of the determinants of the simplicial cones in the used triangulation
#! @Description
#! This is an alias for <C>NmzConeProperty( cone, "TriangulationDetSum" );</C> see <Ref Func="NmzConeProperty"/>.
DeclareGlobalFunction( "NmzTriangulationDetSum" );
#! @Arguments cone
#! @Returns the number of simplicial cones in the used triangulation
#! @Description
#! This is an alias for <C>NmzConeProperty( cone, "TriangulationSize" );</C> see <Ref Func="NmzConeProperty"/>.
DeclareGlobalFunction( "NmzTriangulationSize" );
#! @Arguments cone
#! @Description
#! This is an alias for <C>NmzConeProperty( cone, "UnimodularTriangulation" );</C> see <Ref Func="NmzConeProperty"/>.
DeclareGlobalFunction( "NmzUnimodularTriangulation" );
#! @Arguments cone
#! @Description
#! This is an alias for <C>NmzConeProperty( cone, "UnitGroupIndex" );</C> see <Ref Func="NmzConeProperty"/>.
DeclareGlobalFunction( "NmzUnitGroupIndex" );
#! @Arguments cone
#! @Returns a matrix whose rows are the vertices of the polyhedron <A>cone</A> with float coordinates
#! @Description
#! 
#! The rows of this matrix represent the vertices of <A>cone</A>, printed as floats for better readability.
#! The result might be inexact, and should therefore not be used for computations.
#! <P/>
#! This is an alias for <C>NmzConeProperty( cone, "VerticesFloat" );</C> see <Ref Func="NmzConeProperty"/>.
DeclareGlobalFunction( "NmzVerticesFloat" );
#! @Arguments cone
#! @Returns a matrix whose rows are the vertices of the polyhedron
#! @Description
#! This is an alias for <C>NmzConeProperty( cone, "VerticesOfPolyhedron" );</C> see <Ref Func="NmzConeProperty"/>.
DeclareGlobalFunction( "NmzVerticesOfPolyhedron" );
#! @Arguments cone
#! @Description
#! This is an alias for <C>NmzConeProperty( cone, "VirtualMultiplicity" );</C> see <Ref Func="NmzConeProperty"/>.
DeclareGlobalFunction( "NmzVirtualMultiplicity" );
#! @Arguments cone
#! @Description
#! 
#!  Supported in Normaliz >= 3.5.0.
#! <P/>
#! This is an alias for <C>NmzConeProperty( cone, "Volume" );</C> see <Ref Func="NmzConeProperty"/>.
DeclareGlobalFunction( "NmzVolume" );
#! @Arguments cone
#! @Description
#! This is an alias for <C>NmzConeProperty( cone, "WeightedEhrhartQuasiPolynomial" );</C> see <Ref Func="NmzConeProperty"/>.
DeclareGlobalFunction( "NmzWeightedEhrhartQuasiPolynomial" );
#! @Arguments cone
#! @Description
#! This is an alias for <C>NmzConeProperty( cone, "WeightedEhrhartSeries" );</C> see <Ref Func="NmzConeProperty"/>.
DeclareGlobalFunction( "NmzWeightedEhrhartSeries" );
#! @Arguments cone
#! @Description
#! This is an alias for <C>NmzConeProperty( cone, "WitnessNotIntegrallyClosed" );</C> see <Ref Func="NmzConeProperty"/>.
DeclareGlobalFunction( "NmzWitnessNotIntegrallyClosed" );
